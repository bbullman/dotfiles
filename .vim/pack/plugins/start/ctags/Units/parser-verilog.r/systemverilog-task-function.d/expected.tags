task_func	input.sv	/^module task_func;$/;"	m
crc	input.sv	/^  function automatic int crc( ref byte packet [1000:1] );$/;"	f	module:task_func
packet	input.sv	/^  function automatic int crc( ref byte packet [1000:1] );$/;"	p	function:task_func.crc
show	input.sv	/^  task automatic show ( const ref byte data [] );$/;"	t	module:task_func
data	input.sv	/^  task automatic show ( const ref byte data [] );$/;"	p	task:task_func.show
attr	input.sv	/^  task automatic attr ( (* my_attr *) const ref foo, enum { s0, s1 } sel_e );$/;"	t	module:task_func
foo	input.sv	/^  task automatic attr ( (* my_attr *) const ref foo, enum { s0, s1 } sel_e );$/;"	p	task:task_func.attr
sel_e	input.sv	/^  task automatic attr ( (* my_attr *) const ref foo, enum { s0, s1 } sel_e );$/;"	p	task:task_func.attr
C	input.sv	/^class C;$/;"	C
func_test	input.sv	/^class func_test;$/;"	C
bar	input.sv	/^  function void foo::bar(uvm_object element);$/;"	f	class:func_test.foo
element	input.sv	/^  function void foo::bar(uvm_object element);$/;"	p	function:func_test.foo.bar
do_compare	input.sv	/^  function bit do_compare(uvm_object rhs, uvm_comparer comparer);$/;"	f	class:func_test
rhs	input.sv	/^  function bit do_compare(uvm_object rhs, uvm_comparer comparer);$/;"	p	function:func_test.do_compare
comparer	input.sv	/^  function bit do_compare(uvm_object rhs, uvm_comparer comparer);$/;"	p	function:func_test.do_compare
do_pack	input.sv	/^  function void do_pack(uvm_packer packer);$/;"	f	class:func_test
packer	input.sv	/^  function void do_pack(uvm_packer packer);$/;"	p	function:func_test.do_pack
get_if	input.sv	/^  function uvm_port_base #(IF) get_if(int index=0);$/;"	f	class:func_test
index	input.sv	/^  function uvm_port_base #(IF) get_if(int index=0);$/;"	p	function:func_test.get_if
bind_vitf	input.sv	/^  function void bind_vitf(virtual wb_if.master sigs);$/;"	f	class:func_test
sigs	input.sv	/^  function void bind_vitf(virtual wb_if.master sigs);$/;"	p	function:func_test.bind_vitf
get	input.sv	/^  function string get(string v);$/;"	f	class:func_test
v	input.sv	/^  function string get(string v);$/;"	p	function:func_test.get
get_arg	input.sv	/^  function string get_arg();$/;"	f	class:func_test
